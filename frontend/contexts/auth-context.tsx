"use client"

import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react'
import { isAuthenticated, getUserInfo, logout as authLogout, UserInfo } from '@/lib/auth'
import { useIdleTimer } from '@/hooks/use-idle-timer'

interface AuthContextType {
  isLoggedIn: boolean
  user: UserInfo | null
  isLoading: boolean
  login: (userData: UserInfo) => void
  logout: () => Promise<void>
  refreshUserData: () => Promise<void>
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

interface AuthProviderProps {
  children: ReactNode
}

export function AuthProvider({ children }: AuthProviderProps) {
  const [isLoggedIn, setIsLoggedIn] = useState(false)
  const [user, setUser] = useState<UserInfo | null>(null)
  const [isLoading, setIsLoading] = useState(true)

  // Ïã§Î¨¥ ÌëúÏ§Ä: 30Î∂Ñ ÎπÑÌôúÏÑ± Ïãú ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉ (ÏùÄÌñâ/Í∏àÏúµ: 15Î∂Ñ, ÏùºÎ∞ò ÏÑúÎπÑÏä§: 30-60Î∂Ñ)
  const IDLE_TIMEOUT = 30 * 60 * 1000 // 30Î∂Ñ

  // Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ Î∞è ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const checkAuthStatus = async () => {
    try {
      setIsLoading(true)
      const authenticated = isAuthenticated()

      if (authenticated) {
        const userInfo = await getUserInfo()
        if (userInfo) {
          setIsLoggedIn(true)
          setUser(userInfo)
          console.log('‚úÖ Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏Îê®:', userInfo.name)
        } else {
          // ÌÜ†ÌÅ∞ÏùÄ ÏûàÏßÄÎßå ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÎäî Í≤ΩÏö∞ (ÎßåÎ£åÎêú ÌÜ†ÌÅ∞ Îì±)
          setIsLoggedIn(false)
          setUser(null)
          console.log('‚ùå ÌÜ†ÌÅ∞Ïù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå')
        }
      } else {
        setIsLoggedIn(false)
        setUser(null)
        console.log('üîì Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùå')
      }
    } catch (error) {
      console.error('Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ Ï§ë Ïò§Î•ò:', error)
      setIsLoggedIn(false)
      setUser(null)
    } finally {
      setIsLoading(false)
    }
  }

  // Î°úÍ∑∏Ïù∏ Ìï®Ïàò (Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ ÌõÑ Ìò∏Ï∂ú)
  const login = (userData: UserInfo) => {
    setIsLoggedIn(true)
    setUser(userData)
    console.log('‚úÖ Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏:', userData.name)
  }

  // Î°úÍ∑∏ÏïÑÏõÉ Ìï®Ïàò
  const logout = async () => {
    try {
      await authLogout() // Î∞±ÏóîÎìú Î°úÍ∑∏ÏïÑÏõÉ API Ìò∏Ï∂ú
      setIsLoggedIn(false)
      setUser(null)
      console.log('üîì Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å')

      // ÌôàÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏ Ïù¥Î≤§Ìä∏ Î∞úÏÉù
      window.dispatchEvent(new CustomEvent('auth-logout-redirect'))
    } catch (error) {
      console.error('Î°úÍ∑∏ÏïÑÏõÉ Ï§ë Ïò§Î•ò:', error)
      // Ïò§Î•òÍ∞Ä Î∞úÏÉùÌï¥ÎèÑ Î°úÏª¨ ÏÉÅÌÉúÎäî Ï¥àÍ∏∞ÌôîÌïòÍ≥† Î¶¨Îã§Ïù¥Î†âÌä∏
      setIsLoggedIn(false)
      setUser(null)
      window.dispatchEvent(new CustomEvent('auth-logout-redirect'))
    }
  }

  // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÉàÎ°úÍ≥†Ïπ®
  const refreshUserData = async () => {
    if (isAuthenticated()) {
      const userInfo = await getUserInfo()
      if (userInfo) {
        setUser(userInfo)
      }
    }
  }

  // ÌÜ†ÌÅ∞ ÎßåÎ£å Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà (Î≥¥Ïïà Í∞ïÌôî)
  useEffect(() => {
    const handleTokenExpired = () => {
      console.log('üîì ÌÜ†ÌÅ∞ ÎßåÎ£åÎ°ú Ïù∏Ìïú ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉ')
      setIsLoggedIn(false)
      setUser(null)
      // ÌÜ†ÌÅ∞ ÎßåÎ£å ÏãúÏóêÎèÑ ÌôàÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
      window.dispatchEvent(new CustomEvent('auth-logout-redirect'))
    }

    // ÌÜ†ÌÅ∞ ÎßåÎ£å Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù
    window.addEventListener('auth-token-expired', handleTokenExpired)

    return () => {
      window.removeEventListener('auth-token-expired', handleTokenExpired)
    }
  }, [])

  // Idle Timer ÏÑ§Ï†ï (ÎπÑÌôúÏÑ± Ïãú ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉ)
  useIdleTimer({
    timeout: IDLE_TIMEOUT,
    onIdle: () => {
      if (isLoggedIn) {
        console.log('‚è∞ 30Î∂Ñ ÎπÑÌôúÏÑ±ÏúºÎ°ú Ïù∏Ìïú ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉ')
        logout()
      }
    },
    enabled: isLoggedIn // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÏóêÏÑúÎßå ÌôúÏÑ±Ìôî
  })

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏
  useEffect(() => {
    checkAuthStatus()
  }, [])

  const value: AuthContextType = {
    isLoggedIn,
    user,
    isLoading,
    login,
    logout,
    refreshUserData
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}

// Context ÏÇ¨Ïö©ÏùÑ ÏúÑÌïú custom hook
export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}